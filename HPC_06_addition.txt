%%writefile vector_addition.cu
#include 
#include 
using namespace std;

// CUDA kernel: adds A[i] + B[i] and stores in C[i]
__global__ void add(int* A, int* B, int* C, int N) {
    int i = threadIdx.x;
    if (i < N) C[i] = A[i] + B[i];
}

// Fill array with random numbers
void fill(int* arr, int N) {
    for (int i = 0; i < N; i++) arr[i] = rand() % 10;
}

// Print array
void print(const int* arr, int N) {
    for (int i = 0; i < N; i++) cout << arr[i] << " ";
    cout << "\n";
}

int main() {
    const int N = 4, size = N * sizeof(int);
    int A[N], B[N], C[N], *dA, *dB, *dC;

    fill(A, N); fill(B, N);
    cout << "A: "; print(A, N);
    cout << "B: "; print(B, N);

    cudaMalloc(&dA, size); cudaMalloc(&dB, size); cudaMalloc(&dC, size);
    cudaMemcpy(dA, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(dB, B, size, cudaMemcpyHostToDevice);

    add<<<1, N>>>(dA, dB, dC, N);
    cudaMemcpy(C, dC, size, cudaMemcpyDeviceToHost);

    cout << "A + B = "; print(C, N);

    cudaFree(dA); cudaFree(dB); cudaFree(dC);
    return 0;
}

!nvcc -arch=sm_75 vector_addition.cu -o vector_addition
!./vector_addition
