#include <iostream>
#include <vector>
#include <omp.h>
#include <ctime>

using namespace std;

void sequentialBubbleSort(vector<int>& a) {
    int n = a.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
            }
        }
    }
}

void parallelBubbleSort(vector<int>& a) {
    int n = a.size();
    for (int i = 0; i < n; i++) {
        #pragma omp parallel for
        for (int j = 0; j < n - 1; j += 2) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
            }
        }

        #pragma omp parallel for
        for (int j = 1; j < n - 1; j += 2) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
            }
        }
    }
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> a(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    vector<int> seqArr = a;
    vector<int> parArr = a;

    clock_t seqStart = clock();
    sequentialBubbleSort(seqArr);
    clock_t seqEnd = clock();

    clock_t parStart = clock();
    parallelBubbleSort(parArr);
    clock_t parEnd = clock();

    cout << "Sorted array using Sequential Bubble Sort: ";
    for (int num : seqArr)
        cout << num << " ";
    cout << endl;

    cout << "Sorted array using Parallel Bubble Sort: ";
    for (int num : parArr)
        cout << num << " ";
    cout << endl;

    double seqDuration = double(seqEnd - seqStart) / CLOCKS_PER_SEC;
    double parDuration = double(parEnd - parStart) / CLOCKS_PER_SEC;

    cout << "Sequential Bubble Sort Time (s): " << seqDuration << endl;
    cout << "Parallel Bubble Sort Time (s): " << parDuration << endl;

    return 0;
}
