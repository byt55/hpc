#include<iostream>
#include<vector>
#include<omp.h>
#include<ctime>

using namespace std;

void bubbleSort(vector<int> &a){
    int n = a.size();
    bool swapped = true;
    
    while(swapped){
        swapped = false ;
        #pragma omp parallel for
        for(int i=0;i<n-1;i++){
            if(a[i]>a[i+1]){
                swap(a[i],a[i+1]);
                swapped = true ;
            }
        }
    }
}

void merge(vector<int>& a, int l, int m, int r){
    vector<int>temp;
    int left=l;
    int right=m+1;
    
    while(left<=m && right<=r){
        if(a[left]<=a[right]){
            temp.push_back(a[left]);
            left++;
        }
        else{
            temp.push_back(a[right]);
            right++;
        }
    }
    
    while(left<=m){
        temp.push_back(a[left]);
        left++;
    }
    
    while(right<=r){
        temp.push_back(a[right]);
        right++;
    }
    
    for(int i=l;i<=r;i++){
        a[i] = temp[i-1];
    }
}

void mergeSort(vector<int>& a, int l, int r){
    if(l<r){
        int m= l+(r-l)/2;
        #pragma omp parallel sections
        {
            #pragma omp section
            mergeSort(a,l,m);
            #pragma omp section
            mergeSort(a,m+1,r);
        }
        merge(a,l,m,r);
    }
}

int main(){
    int n ; 
    cout << "Enter the no of elements : ";
    cin >> n;
    
    vector<int>a(n);
    cout << "Enter the elements : ";
    for(int i=0;i<n;i++)
        cin >>a[i];
        
    clock_t bubbleStart=clock();
    bubbleSort(a);
    clock_t bubbleEnd=clock();
    cout << "Sorted array using bubble sort : ";
    for(int num:a)
        cout << num << " ";
    cout << endl;
    
    vector<int> mergeArr = a;
    clock_t mergeStart = clock();
    mergeSort(mergeArr ,0,n-1);
    clock_t mergeEnd = clock();
    cout << "Sorted array using merge sort : ";
    for(int num:a)
        cout << num << " ";
    cout << endl;
    
    double bubbleDuration = double(bubbleEnd-bubbleStart)/CLOCKS_PER_SEC;
    double mergeDuration = double(mergeEnd-mergeStart)/CLOCKS_PER_SEC;
    
    cout << "Bubble sort time in seconds : " << bubbleDuration << endl;
    cout << "Merge sort time in seconds : " << mergeDuration << endl;
    
    return 0;
}
