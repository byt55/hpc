#include <iostream>
#include <vector>
#include <ctime>
#include <omp.h>

using namespace std;

void merge(vector<int>& a, int l, int m, int r) {
    vector<int> temp;
    int left = l, right = m + 1;

    while (left <= m && right <= r) {
        if (a[left] <= a[right]) {
            temp.push_back(a[left++]);
        } else {
            temp.push_back(a[right++]);
        }
    }

    while (left <= m)
        temp.push_back(a[left++]);
    while (right <= r)
        temp.push_back(a[right++]);

    for (int i = l; i <= r; i++) {
        a[i] = temp[i - l];
    }
}

void sequentialMergeSort(vector<int>& a, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        sequentialMergeSort(a, l, m);
        sequentialMergeSort(a, m + 1, r);
        merge(a, l, m, r);
    }
}

void parallelMergeSort(vector<int>& a, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(a, l, m);

            #pragma omp section
            parallelMergeSort(a, m + 1, r);
        }
        merge(a, l, m, r);
    }
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> a(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++)
        cin >> a[i];

    vector<int> seqArr = a;
    vector<int> parArr = a;

    clock_t seqStart = clock();
    sequentialMergeSort(seqArr, 0, n - 1);
    clock_t seqEnd = clock();

    clock_t parStart = clock();
    parallelMergeSort(parArr, 0, n - 1);
    clock_t parEnd = clock();

    cout << "Sorted array using Sequential Merge Sort: ";
    for (int num : seqArr)
        cout << num << " ";
    cout << endl;

    cout << "Sorted array using Parallel Merge Sort: ";
    for (int num : parArr)
        cout << num << " ";
    cout << endl;

    double seqDuration = double(seqEnd - seqStart) / CLOCKS_PER_SEC;
    double parDuration = double(parEnd - parStart) / CLOCKS_PER_SEC;

    cout << "Sequential Merge Sort Time (s): " << seqDuration << endl;
    cout << "Parallel Merge Sort Time (s): " << parDuration << endl;

    return 0;
}
